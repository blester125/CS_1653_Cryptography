import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
import javax.swing.JTabbedPane;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import javax.swing.JLabel;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.JTextField;
import javax.swing.JScrollBar;
import java.awt.GridLayout;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JSplitPane;
import javax.swing.JList;
import javax.swing.ListSelectionModel;
import javax.swing.AbstractListModel;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JPasswordField;
import javax.swing.SwingUtilities;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.DefaultListModel;
import java.util.ArrayList;

public class ClientApp {

	public JFrame frmBrcSafeshare;
	private JTextField usernameField;
	private JTextField ipField;
	private JTextField portField;
	private JPasswordField passwordField;
	private String currentUsername;
	JList loadedGroups;
	int groupFlag = 0;
	int userFlag = 0;

	/**
	 * Launch the application. (Should always launch from RunClient, not here)
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ClientApp window = new ClientApp();
					window.frmBrcSafeshare.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Initialize the GUI when called.
	 */
	public ClientApp() {
		initialize();
	}

	/**
	 * Initialize the client GUI. Long, gross, and mostly generated by eclipse.
	 */
	private void initialize() {
		frmBrcSafeshare = new JFrame();
		frmBrcSafeshare.setTitle("BRC SafeShare");
		frmBrcSafeshare.setBounds(100, 100, 450, 300);
		frmBrcSafeshare.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmBrcSafeshare.setSize(500,330);
		
		final JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		frmBrcSafeshare.getContentPane().add(tabbedPane, BorderLayout.NORTH);

		//Build home page
		JPanel homePage = new JPanel();
		tabbedPane.addTab("Home", null, homePage, null);
		GridBagLayout gbl_homePage = new GridBagLayout();
		gbl_homePage.columnWidths = new int[] {0, 120, 120, 120, 0};
		gbl_homePage.rowHeights = new int[]{34, 14, 23, 31, 14, 23, 31, 14, 14, 0};
		gbl_homePage.columnWeights = new double[]{0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_homePage.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		homePage.setLayout(gbl_homePage);
		
		//Username label
		JLabel lblUsername = new JLabel("Username");
		GridBagConstraints gbc_lblUsername = new GridBagConstraints();
		gbc_lblUsername.anchor = GridBagConstraints.WEST;
		gbc_lblUsername.insets = new Insets(0, 0, 5, 5);
		gbc_lblUsername.gridx = 1;
		gbc_lblUsername.gridy = 1;
		homePage.add(lblUsername, gbc_lblUsername);
		
		//Password label
		JLabel lblPassword = new JLabel("Password (unused)");
		GridBagConstraints gbc_lblPassword = new GridBagConstraints();
		gbc_lblPassword.anchor = GridBagConstraints.WEST;
		gbc_lblPassword.insets = new Insets(0, 0, 5, 5);
		gbc_lblPassword.gridx = 2;
		gbc_lblPassword.gridy = 1;
		homePage.add(lblPassword, gbc_lblPassword);
		
		//Username text field
		usernameField = new JTextField();
		GridBagConstraints gbc_usernameField = new GridBagConstraints();
		gbc_usernameField.fill = GridBagConstraints.HORIZONTAL;
		gbc_usernameField.insets = new Insets(0, 0, 5, 5);
		gbc_usernameField.gridx = 1;
		gbc_usernameField.gridy = 2;
		homePage.add(usernameField, gbc_usernameField);
		usernameField.setColumns(10);
		usernameField.setText("test");
		
		//Password text field
		passwordField = new JPasswordField();
		GridBagConstraints gbc_passwordField = new GridBagConstraints();
		gbc_passwordField.fill = GridBagConstraints.HORIZONTAL;
		gbc_passwordField.insets = new Insets(0, 0, 5, 5);
		gbc_passwordField.gridx = 2;
		gbc_passwordField.gridy = 2;
		homePage.add(passwordField, gbc_passwordField);
		
		//New User button
		final JButton btnNewUser = new JButton("New User");
		GridBagConstraints gbc_btnNewUser = new GridBagConstraints();
		gbc_btnNewUser.anchor = GridBagConstraints.NORTH;
		gbc_btnNewUser.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnNewUser.insets = new Insets(0, 0, 5, 0);
		gbc_btnNewUser.gridx = 3;
		gbc_btnNewUser.gridy = 2;

		btnNewUser.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {

				attemptNewUser();
			}

		}

		);

		homePage.add(btnNewUser, gbc_btnNewUser);


		final JButton btnDeleteUser = new JButton("Delete User");
		GridBagConstraints gbc_btnDeleteUser = new GridBagConstraints();
		gbc_btnDeleteUser.anchor = GridBagConstraints.NORTH;
		gbc_btnDeleteUser.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnDeleteUser.insets = new Insets(0, 0, 5, 5);
		gbc_btnDeleteUser.gridx = 3;
		gbc_btnDeleteUser.gridy = 3;

		btnDeleteUser.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {

				attemptDeleteUser();
			}

		}

		);

		homePage.add(btnDeleteUser, gbc_btnDeleteUser);
		
		//IP Address Label
		JLabel lblIpAddress = new JLabel("IP Address");
		GridBagConstraints gbc_lblIpAddress = new GridBagConstraints();
		gbc_lblIpAddress.anchor = GridBagConstraints.WEST;
		gbc_lblIpAddress.insets = new Insets(0, 0, 5, 5);
		gbc_lblIpAddress.gridx = 1;
		gbc_lblIpAddress.gridy = 4;
		homePage.add(lblIpAddress, gbc_lblIpAddress);
		
		//Port label
		JLabel lblPort = new JLabel("Port");
		GridBagConstraints gbc_lblPort = new GridBagConstraints();
		gbc_lblPort.anchor = GridBagConstraints.NORTHWEST;
		gbc_lblPort.insets = new Insets(0, 0, 5, 5);
		gbc_lblPort.gridx = 2;
		gbc_lblPort.gridy = 4;
		homePage.add(lblPort, gbc_lblPort);
		
		//IP address text field
		ipField = new JTextField();
		GridBagConstraints gbc_ipField = new GridBagConstraints();
		gbc_ipField.fill = GridBagConstraints.HORIZONTAL;
		gbc_ipField.insets = new Insets(0, 0, 5, 5);
		gbc_ipField.gridx = 1;
		gbc_ipField.gridy = 5;
		ipField.setText("localhost");
		homePage.add(ipField, gbc_ipField);
		ipField.setColumns(10);
		
		//Port text field
		portField = new JTextField();
		GridBagConstraints gbc_portField = new GridBagConstraints();
		gbc_portField.fill = GridBagConstraints.HORIZONTAL;
		gbc_portField.insets = new Insets(0, 0, 5, 5);
		gbc_portField.gridx = 2;
		gbc_portField.gridy = 5;
		portField.setText("8080");
		homePage.add(portField, gbc_portField);
		portField.setColumns(10);
		
		//Login button
		final JButton btnLogin = new JButton("Login");
		GridBagConstraints gbc_btnLogin = new GridBagConstraints();
		gbc_btnLogin.anchor = GridBagConstraints.NORTH;
		gbc_btnLogin.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnLogin.insets = new Insets(0, 0, 5, 0);
		gbc_btnLogin.gridx = 3;
		gbc_btnLogin.gridy = 5;

		//attempt to connect to server
		btnLogin.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptLogin(usernameField, ipField, portField, btnLogin, btnNewUser, tabbedPane, btnDeleteUser);

				}
			}


		);

		homePage.add(btnLogin, gbc_btnLogin);
		
		//explanation label
		JLabel lblthisPageDoes = new JLabel("(This page does not have full functionality yet)");
		GridBagConstraints gbc_lblthisPageDoes = new GridBagConstraints();
		gbc_lblthisPageDoes.anchor = GridBagConstraints.NORTHWEST;
		gbc_lblthisPageDoes.insets = new Insets(0, 0, 5, 0);
		gbc_lblthisPageDoes.gridwidth = 3;
		gbc_lblthisPageDoes.gridx = 1;
		gbc_lblthisPageDoes.gridy = 7;
		homePage.add(lblthisPageDoes, gbc_lblthisPageDoes);
		
		//designer label
		JLabel lblNewLabel = new JLabel("CS1653 Project - Brian Lester, Ryan Conley, Carmen Condeluci");
		GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
		gbc_lblNewLabel.anchor = GridBagConstraints.NORTHWEST;
		gbc_lblNewLabel.gridwidth = 4;
		gbc_lblNewLabel.gridx = 1;
		gbc_lblNewLabel.gridy = 8;
		homePage.add(lblNewLabel, gbc_lblNewLabel);
		
		//------------------------------------------------------------------------------------------------
		
		//Build groups page
		JSplitPane groupsPage = new JSplitPane();
		tabbedPane.addTab("Group Servers", null, groupsPage, null);
		
		//left pane with group and user lists
		JSplitPane listsPane = new JSplitPane();
		groupsPage.setRightComponent(listsPane);
		
		//user list panel
		final JPanel usersListPanel = new JPanel();
		listsPane.setRightComponent(usersListPanel);
		GridBagLayout gbl_usersListPanel = new GridBagLayout();
		gbl_usersListPanel.columnWidths = new int[]{162, 0};
		gbl_usersListPanel.rowHeights = new int[]{14, 196, 0};
		gbl_usersListPanel.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_usersListPanel.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		usersListPanel.setLayout(gbl_usersListPanel);
		
		//Users label
		JLabel lblUsers = new JLabel("Users");
		GridBagConstraints gbc_lblUsers = new GridBagConstraints();
		gbc_lblUsers.insets = new Insets(0, 0, 5, 0);
		gbc_lblUsers.gridx = 0;
		gbc_lblUsers.gridy = 0;
		usersListPanel.add(lblUsers, gbc_lblUsers);
		
		//Users lists
		// JList usersListView = new JList();
		// usersListView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		// GridBagConstraints gbc_usersListView = new GridBagConstraints();
		// gbc_usersListView.fill = GridBagConstraints.BOTH;
		// gbc_usersListView.gridx = 0;
		// gbc_usersListView.gridy = 1;
		// usersListPanel.add(usersListView, gbc_usersListView);
		
		//groups panel
		final JPanel groupsListPanel = new JPanel();
		listsPane.setLeftComponent(groupsListPanel);
		GridBagLayout gbl_groupsListPanel = new GridBagLayout();
		gbl_groupsListPanel.columnWidths = new int[]{100, 0};
		gbl_groupsListPanel.rowHeights = new int[]{14, 196, 0};
		gbl_groupsListPanel.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_groupsListPanel.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		groupsListPanel.setLayout(gbl_groupsListPanel);
		
		//groups label
		JLabel lblGroups = new JLabel("Groups");
		GridBagConstraints gbc_lblGroups = new GridBagConstraints();
		gbc_lblGroups.insets = new Insets(0, 0, 5, 0);
		gbc_lblGroups.gridx = 0;
		gbc_lblGroups.gridy = 0;
		groupsListPanel.add(lblGroups, gbc_lblGroups);
		
		//groups list
		// final JList groupsListView = new JList();
		// groupsListView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		// GridBagConstraints gbc_groupsListView = new GridBagConstraints();
		// gbc_groupsListView.fill = GridBagConstraints.BOTH;
		// gbc_groupsListView.gridx = 0;
		// gbc_groupsListView.gridy = 1;
		// groupsListPanel.add(groupsListView, gbc_groupsListView);
		
		//group functionality panel
		JPanel groupFunctionsPanel = new JPanel();
		groupsPage.setLeftComponent(groupFunctionsPanel);
		GridBagLayout gbl_groupFunctionsPanel = new GridBagLayout();
		gbl_groupFunctionsPanel.columnWidths = new int[]{109, 0};
		gbl_groupFunctionsPanel.rowHeights = new int[]{23, 23, 23, 23, 62, 23, 23, 0};
		gbl_groupFunctionsPanel.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_groupFunctionsPanel.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		groupFunctionsPanel.setLayout(gbl_groupFunctionsPanel);
		
		//Create Group Button
		JButton btnCreateGroup = new JButton("Create Group");
		GridBagConstraints gbc_btnCreateGroup = new GridBagConstraints();
		gbc_btnCreateGroup.anchor = GridBagConstraints.NORTH;
		gbc_btnCreateGroup.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnCreateGroup.insets = new Insets(0, 0, 5, 0);
		gbc_btnCreateGroup.gridx = 0;
		gbc_btnCreateGroup.gridy = 0;
		btnCreateGroup.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptCreateGroup(groupsListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnCreateGroup, gbc_btnCreateGroup);
		
		//Delete Group Button
		JButton btnDeleteGroup = new JButton("Delete Group");
		GridBagConstraints gbc_btnDeleteGroup = new GridBagConstraints();
		gbc_btnDeleteGroup.anchor = GridBagConstraints.NORTH;
		gbc_btnDeleteGroup.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnDeleteGroup.insets = new Insets(0, 0, 5, 0);
		gbc_btnDeleteGroup.gridx = 0;
		gbc_btnDeleteGroup.gridy = 1;
		btnDeleteGroup.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptDeleteGroup(groupsListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnDeleteGroup, gbc_btnDeleteGroup);
		
		//Add User to Group button
		JButton btnAddUser = new JButton("Add User");
		GridBagConstraints gbc_btnAddUser = new GridBagConstraints();
		gbc_btnAddUser.anchor = GridBagConstraints.NORTH;
		gbc_btnAddUser.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnAddUser.insets = new Insets(0, 0, 5, 0);
		gbc_btnAddUser.gridx = 0;
		gbc_btnAddUser.gridy = 2;
		btnAddUser.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptAddToGroup(usersListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnAddUser, gbc_btnAddUser);
		
		//Remove User from Group button
		JButton btnRemoveUser = new JButton("Remove User");
		GridBagConstraints gbc_btnRemoveUser = new GridBagConstraints();
		gbc_btnRemoveUser.anchor = GridBagConstraints.NORTH;
		gbc_btnRemoveUser.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnRemoveUser.insets = new Insets(0, 0, 5, 0);
		gbc_btnRemoveUser.gridx = 0;
		gbc_btnRemoveUser.gridy = 3;
		groupFunctionsPanel.add(btnRemoveUser, gbc_btnRemoveUser);
		
		//View Groups button
		JButton btnViewGroups = new JButton("View My Groups");
		GridBagConstraints gbc_btnViewGroups = new GridBagConstraints();
		gbc_btnViewGroups.anchor = GridBagConstraints.NORTH;
		gbc_btnViewGroups.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewGroups.insets = new Insets(0, 0, 5, 0);
		gbc_btnViewGroups.gridx = 0;
		gbc_btnViewGroups.gridy = 5;
		//attempt to connect to server
		btnViewGroups.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					populateGroupList(groupsListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnViewGroups, gbc_btnViewGroups);
		
		//View users button
		JButton btnViewUsers = new JButton("View My Users");
		GridBagConstraints gbc_btnViewUsers = new GridBagConstraints();
		gbc_btnViewUsers.anchor = GridBagConstraints.NORTH;
		gbc_btnViewUsers.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewUsers.gridx = 0;
		gbc_btnViewUsers.gridy = 6;
		btnViewUsers.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					populateUserList(usersListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnViewUsers, gbc_btnViewUsers);		
		
		//-------------------------------------------------------------------------------------
		
		//Build file server page
		JSplitPane fileServersPage = new JSplitPane();
		tabbedPane.addTab("File Servers", null, fileServersPage, null);
		
		//File and group lists pane
		JSplitPane fileListsPane = new JSplitPane();
		fileServersPage.setRightComponent(fileListsPane);
		
		//Left pane for group lists
		JPanel groupsPane = new JPanel();
		fileListsPane.setLeftComponent(groupsPane);
		GridBagLayout gbl_groupsPane = new GridBagLayout();
		gbl_groupsPane.columnWidths = new int[]{100, 0};
		gbl_groupsPane.rowHeights = new int[]{14, 191, 0};
		gbl_groupsPane.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_groupsPane.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		groupsPane.setLayout(gbl_groupsPane);
		
		//Group label
		JLabel lblGroups_1 = new JLabel("Groups");
		GridBagConstraints gbc_lblGroups_1 = new GridBagConstraints();
		gbc_lblGroups_1.anchor = GridBagConstraints.NORTH;
		gbc_lblGroups_1.insets = new Insets(0, 0, 5, 0);
		gbc_lblGroups_1.gridx = 0;
		gbc_lblGroups_1.gridy = 0;
		groupsPane.add(lblGroups_1, gbc_lblGroups_1);
		
		//groups list
		JList groupsList = new JList();
		groupsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_groupsList = new GridBagConstraints();
		gbc_groupsList.fill = GridBagConstraints.BOTH;
		gbc_groupsList.gridx = 0;
		gbc_groupsList.gridy = 1;
		groupsPane.add(groupsList, gbc_groupsList);
		
		//Right pane for file list
		JPanel filesPane = new JPanel();
		fileListsPane.setRightComponent(filesPane);
		GridBagLayout gbl_filesPane = new GridBagLayout();
		gbl_filesPane.columnWidths = new int[]{162, 0};
		gbl_filesPane.rowHeights = new int[]{14, 191, 0};
		gbl_filesPane.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_filesPane.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		filesPane.setLayout(gbl_filesPane);
		
		//File label
		JLabel lblFiles = new JLabel("Files");
		GridBagConstraints gbc_lblFiles = new GridBagConstraints();
		gbc_lblFiles.anchor = GridBagConstraints.NORTH;
		gbc_lblFiles.insets = new Insets(0, 0, 5, 0);
		gbc_lblFiles.gridx = 0;
		gbc_lblFiles.gridy = 0;
		filesPane.add(lblFiles, gbc_lblFiles);
		
		//Files list
		JList filesList = new JList();
		filesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_filesList = new GridBagConstraints();
		gbc_filesList.fill = GridBagConstraints.BOTH;
		gbc_filesList.gridx = 0;
		gbc_filesList.gridy = 1;
		filesPane.add(filesList, gbc_filesList);
		
		//file operations pane
		JPanel fileOperationsPane = new JPanel();
		fileServersPage.setLeftComponent(fileOperationsPane);
		GridBagLayout gbl_fileOperationsPane = new GridBagLayout();
		gbl_fileOperationsPane.columnWidths = new int[]{109, 0};
		gbl_fileOperationsPane.rowHeights = new int[]{23, 23, 23, 62, 23, 23, 23, 0};
		gbl_fileOperationsPane.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_fileOperationsPane.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		fileOperationsPane.setLayout(gbl_fileOperationsPane);
		
		//upload button
		JButton btnUploadFile = new JButton("Upload File");
		GridBagConstraints gbc_btnUploadFile = new GridBagConstraints();
		gbc_btnUploadFile.anchor = GridBagConstraints.NORTH;
		gbc_btnUploadFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnUploadFile.insets = new Insets(0, 0, 5, 0);
		gbc_btnUploadFile.gridx = 0;
		gbc_btnUploadFile.gridy = 0;
		fileOperationsPane.add(btnUploadFile, gbc_btnUploadFile);
		
		//download button
		JButton btnDownloadFile = new JButton("Download File");
		GridBagConstraints gbc_btnDownloadFile = new GridBagConstraints();
		gbc_btnDownloadFile.anchor = GridBagConstraints.NORTH;
		gbc_btnDownloadFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnDownloadFile.insets = new Insets(0, 0, 5, 0);
		gbc_btnDownloadFile.gridx = 0;
		gbc_btnDownloadFile.gridy = 1;
		fileOperationsPane.add(btnDownloadFile, gbc_btnDownloadFile);
		
		//delete button
		JButton btnDeleteFile = new JButton("Delete File");
		GridBagConstraints gbc_btnDeleteFile = new GridBagConstraints();
		gbc_btnDeleteFile.anchor = GridBagConstraints.NORTH;
		gbc_btnDeleteFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnDeleteFile.insets = new Insets(0, 0, 5, 0);
		gbc_btnDeleteFile.gridx = 0;
		gbc_btnDeleteFile.gridy = 2;
		fileOperationsPane.add(btnDeleteFile, gbc_btnDeleteFile);
		
		//view groups button
		JButton btnViewGroups_1 = new JButton("View My Groups");
		GridBagConstraints gbc_btnViewGroups_1 = new GridBagConstraints();
		gbc_btnViewGroups_1.anchor = GridBagConstraints.NORTH;
		gbc_btnViewGroups_1.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewGroups_1.insets = new Insets(0, 0, 5, 0);
		gbc_btnViewGroups_1.gridx = 0;
		gbc_btnViewGroups_1.gridy = 4;
		fileOperationsPane.add(btnViewGroups_1, gbc_btnViewGroups_1);
		
		//view my files button
		JButton btnViewMyFiles = new JButton("View My Files");
		GridBagConstraints gbc_btnViewMyFiles = new GridBagConstraints();
		gbc_btnViewMyFiles.anchor = GridBagConstraints.NORTH;
		gbc_btnViewMyFiles.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewMyFiles.insets = new Insets(0, 0, 5, 0);
		gbc_btnViewMyFiles.gridx = 0;
		gbc_btnViewMyFiles.gridy = 5;
		fileOperationsPane.add(btnViewMyFiles, gbc_btnViewMyFiles);
		
		//view all files button
		JButton btnViewAllFiles = new JButton("View All Files");
		GridBagConstraints gbc_btnViewAllFiles = new GridBagConstraints();
		gbc_btnViewAllFiles.anchor = GridBagConstraints.NORTH;
		gbc_btnViewAllFiles.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewAllFiles.gridx = 0;
		gbc_btnViewAllFiles.gridy = 6;
		fileOperationsPane.add(btnViewAllFiles, gbc_btnViewAllFiles);

		//-------------------------------------------------------------------------

		//Set Enabled/Disabled functionality on startup
		tabbedPane.setEnabledAt(1, false);
		tabbedPane.setEnabledAt(2, false);
		btnNewUser.setEnabled(false);
		btnDeleteUser.setEnabled(false);

		
	}

	//Attempts to log in to the group server with the given username.
	//Eventually will need authentication via password as well, but 
	//this is not required for phase 2.
	public void attemptLogin(JTextField usernameField, JTextField ipField, JTextField portField, JButton btnLogin, JButton btnNewUser, JTabbedPane tabbedPane, JButton btnDeleteUser){

		//Pull information from fields
		String username = usernameField.getText();
		String ipAddr = ipField.getText();
		int port = Integer.parseInt(portField.getText());

		//Attempt to connect to group server
		//If fail, alert of failure
		if(!RunClient.groupC.connect(ipAddr, port)){
			JOptionPane.showMessageDialog(null, "Connection failure. Could not connect to server at " + ipAddr + ":" + port + ".", "Connection Failure", JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		else{
			//Examine token, if fail, alert of failure.
			RunClient.uToken = RunClient.groupC.getToken(username);

			if(RunClient.uToken == null){
				JOptionPane.showMessageDialog(null, "That user does not exist.", "Incorrect Login", JOptionPane.OK_CANCEL_OPTION);
				return;
			}

			//Enable navigation to application resources.
			btnLogin.setEnabled(false);
			btnNewUser.setEnabled(true);
			btnDeleteUser.setEnabled(true);
			tabbedPane.setEnabledAt(1,true);
			tabbedPane.setEnabledAt(2,true);

			currentUsername = username;
		}

	}

	//Attempts to create a new user on the group server.
	//Eventually will need required new password creation, but
	//this is not required for phase 2.
	//
	//Should only work if a user is admin. Only functions after
	//a user is logged in.
	public void attemptNewUser(){

		//Construct a dialogue box to capture user input and do so.
		JPanel newUserDialogue = new JPanel();
		JTextField newUsernameField = new JTextField(20);
		JLabel usernameDialogueLabel = new JLabel("Please enter a username: ");

		newUserDialogue.add(usernameDialogueLabel);
		newUserDialogue.add(newUsernameField);

		int dialogue = JOptionPane.showOptionDialog(null, newUserDialogue, "New User Creation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		String newUsername = newUsernameField.getText();

		if(dialogue == 0 && newUsername.length() > 0){

			//Create new user with currently logged in user token. If fail, report and return
			if(!RunClient.groupC.createUser(newUsername, RunClient.uToken)){
				JOptionPane.showMessageDialog(null, "The user could not be created.", "User Creation Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}
			
		}
	}


	//Attempts to delete a user on the group server.
	//Eventually will need required new password creation, but
	//this is not required for phase 2.
	//
	//Should only work if a user is admin. Only functions after
	//a user is logged in.
	public void attemptDeleteUser(){

		//Construct a dialogue box to capture user input and do so.
		JPanel deleteUserDialogue = new JPanel();
		JTextField delUsernameField = new JTextField(20);
		JLabel usernameDialogueLabel = new JLabel("Please enter a username: ");

		deleteUserDialogue.add(usernameDialogueLabel);
		deleteUserDialogue.add(delUsernameField);

		int dialogue = JOptionPane.showOptionDialog(null, deleteUserDialogue, "Delete User", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		String delUsername = delUsernameField.getText();

		if(dialogue == 0 && delUsername.length() > 0 && !(currentUsername.equals(delUsername))){

			//Create new user with currently logged in user token. If fail, report and return
			if(!RunClient.groupC.deleteUser(delUsername, RunClient.uToken)){
				JOptionPane.showMessageDialog(null, "The user could not be deleted.", "User Deletion Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}
			
		}
	}

	//Populates the visable list with a users groups based
	//on their token 
	public void populateGroupList(JPanel groupsListPanel){

		if(groupFlag == 1){
			groupsListPanel.removeAll();
			groupsListPanel.updateUI();
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername);

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		ArrayList<String> temp = (ArrayList<String>)currToken.getGroups();

		final JList groupsListView = new JList(temp.toArray());
		groupsListView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_groupsListView = new GridBagConstraints();
		gbc_groupsListView.fill = GridBagConstraints.BOTH;
		gbc_groupsListView.gridx = 0;
		gbc_groupsListView.gridy = 1;
		groupsListPanel.add(groupsListView, gbc_groupsListView);

		JLabel lblGroups = new JLabel("Groups");
		GridBagConstraints gbc_lblGroups = new GridBagConstraints();
		gbc_lblGroups.insets = new Insets(0, 0, 5, 0);
		gbc_lblGroups.gridx = 0;
		gbc_lblGroups.gridy = 0;
		groupsListPanel.add(lblGroups, gbc_lblGroups);

		groupsListPanel.revalidate();
		groupsListPanel.repaint();

		groupFlag = 1;

		loadedGroups = groupsListView;

	}

	//Populates the visable list with users from a selected
	//group based on their token 
	public void populateUserList(JPanel usersListPanel){

		if(userFlag == 1){
			usersListPanel.removeAll();
			usersListPanel.updateUI();
		}

		String currGroup = "";

		if(loadedGroups != null && loadedGroups.getSelectedValue() != null)
			currGroup = (String)loadedGroups.getSelectedValue();
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername);

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		ArrayList<String> members = (ArrayList<String>)RunClient.groupC.listMembers(currGroup, currToken);

		final JList usersListView = new JList(members.toArray());
		usersListView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_usersListView = new GridBagConstraints();
		gbc_usersListView.fill = GridBagConstraints.BOTH;
		gbc_usersListView.gridx = 0;
		gbc_usersListView.gridy = 1;
		usersListPanel.add(usersListView, gbc_usersListView);

		JLabel lblUsers = new JLabel("Users");
		GridBagConstraints gbc_lblUsers = new GridBagConstraints();
		gbc_lblUsers.insets = new Insets(0, 0, 5, 0);
		gbc_lblUsers.gridx = 0;
		gbc_lblUsers.gridy = 0;
		usersListPanel.add(lblUsers, gbc_lblUsers);

		userFlag = 1;

		usersListPanel.revalidate();
		usersListPanel.repaint();
	}

	//Creates a new group with a given name and gives
	//the user who created it ownership rights.
	public void attemptCreateGroup(JPanel groupsListPanel){


		//Construct a dialogue box to capture user input and do so.
		JPanel newGroupDialogue = new JPanel();
		JTextField newGroupField = new JTextField(20);
		JLabel groupDialogueLabel = new JLabel("Please enter a group name: ");

		newGroupDialogue.add(groupDialogueLabel);
		newGroupDialogue.add(newGroupField);

		int dialogue = JOptionPane.showOptionDialog(null, newGroupDialogue, "New Group Creation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		String newGroup = newGroupField.getText();

		if(dialogue == 0 && newGroup.length() > 0){

			//Create new user with currently logged in user token. If fail, report and return
			if(!RunClient.groupC.createGroup(newGroup, RunClient.uToken)){
				JOptionPane.showMessageDialog(null, "The group could not be created.", "User Creation Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}
			
			populateGroupList(groupsListPanel);
		}
	}

	//Deletes a group that is selected
	public void attemptDeleteGroup(JPanel groupsListPanel){

		String currGroup = "";

		if(loadedGroups != null && loadedGroups.getSelectedValue() != null)
			currGroup = (String)loadedGroups.getSelectedValue();
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername);

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(null, "Delete group " + currGroup + "?","Really?", JOptionPane.YES_NO_OPTION);
		if (confirm == JOptionPane.YES_OPTION) {
			if (RunClient.groupC.deleteGroup(currGroup, currToken)) {
				populateGroupList(groupsListPanel);
			} else
				JOptionPane.showMessageDialog(null, "Did not delete " + currGroup + ".");
		}
	}

	//Adds user to selected group
	//NEED TO FINISH
	public void attemptAddToGroup(JPanel usersListPanel){

		String currGroup = "";

		if(loadedGroups != null && loadedGroups.getSelectedValue() != null)
			currGroup = (String)loadedGroups.getSelectedValue();
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername);

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		//Construct a dialogue box to capture user input and do so.
		JPanel chooseUserDialogue = new JPanel();
		JTextField chooseUsernameField = new JTextField(20);
		JLabel usernameDialogueLabel = new JLabel("Please enter a username: ");

		chooseUserDialogue.add(usernameDialogueLabel);
		chooseUserDialogue.add(chooseUsernameField);

		int dialogue = JOptionPane.showOptionDialog(null, chooseUserDialogue, "Choose User", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		String chooseUsername = chooseUsernameField.getText();

		if(dialogue == 0 && chooseUsername.length() > 0 && !(currentUsername.equals(chooseUsername))){

			if(!RunClient.groupC.addUserToGroup(chooseUsername, currGroup, currToken)){
				JOptionPane.showMessageDialog(null, "The user could not be added.", "User Addition Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}
			
		}

	}

}
