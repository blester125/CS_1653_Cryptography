/************************************
 * CS 1653 Term Project at the      *
 * University of Pittsburgh         *
 * Taught by Bill Garrison          *
 * Spring 2016                      *
 * By:                              *
 *   Brian Lester                   *
 *   Ryan Conley                    *
 *   Carmen Condeluci               *
 ************************************/

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;

@SuppressWarnings("unchecked")
public class ClientApp {

	public JFrame frmBrcSafeshare;
	private JTextField usernameField;
	private JTextField ipField;
	private JTextField portField;
	private JTextField fileIpField;
	private JTextField filePortField;
	private JTextField publicPathField;
	private JTextField privatePathField;
	private String currentUsername;
	private JButton btnEnableTwoFactor;
	JList loadedGroups;
	JList loadedUsers;
	JList loadedFileGroups;
	JList loadedFileList;
	String[] loadedGroupNames;
	String[] loadedFileGroupNames;
	int groupFlag = 0;
	int userFlag = 0;
	int groupFileFlag = 0;
	int fileFlag = 0;

	/**
	 * Launch the application. (Should always launch from RunClient, not here)
	 */
	public static void main(String[] args) 
	{
		EventQueue.invokeLater(new Runnable() 
		{
			public void run() 
			{
				try 
				{
					ClientApp window = new ClientApp();
					window.frmBrcSafeshare.setVisible(true);
				} 
				catch (Exception e) 
				{
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Initialize the GUI when called.
	 */
	public ClientApp() 
	{
		initialize();
	}

	/**
	 * Initialize the client GUI. Long, gross, and mostly generated by eclipse.
	 */
	private void initialize() {
		frmBrcSafeshare = new JFrame();
		frmBrcSafeshare.setTitle("BRC SafeShare");
		frmBrcSafeshare.setBounds(100, 100, 450, 300);
		frmBrcSafeshare.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frmBrcSafeshare.setSize(500,330);//550x300
		
		final JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
		frmBrcSafeshare.getContentPane().add(tabbedPane, BorderLayout.NORTH);

		//Build home page
		JPanel homePage = new JPanel();
		tabbedPane.addTab("Home", null, homePage, null);
		GridBagLayout gbl_homePage = new GridBagLayout();
		gbl_homePage.columnWidths = new int[] {0, 120, 120, 120, 0};
		gbl_homePage.rowHeights = new int[]{34, 14, 23, 31, 14, 23, 31, 14, 14, 0};
		gbl_homePage.columnWeights = new double[]{0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		gbl_homePage.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		homePage.setLayout(gbl_homePage);
		
		//Username label
		JLabel lblUsername = new JLabel("Username");
		GridBagConstraints gbc_lblUsername = new GridBagConstraints();
		gbc_lblUsername.anchor = GridBagConstraints.WEST;
		gbc_lblUsername.insets = new Insets(0, 0, 5, 5);
		gbc_lblUsername.gridx = 1;
		gbc_lblUsername.gridy = 1;
		homePage.add(lblUsername, gbc_lblUsername);
		
		//Public path label
		JLabel lblPassword = new JLabel("Public Key Path");
		GridBagConstraints gbc_lblPassword = new GridBagConstraints();
		gbc_lblPassword.anchor = GridBagConstraints.WEST;
		gbc_lblPassword.insets = new Insets(0, 0, 5, 5);
		gbc_lblPassword.gridx = 2;
		gbc_lblPassword.gridy = 1;
		homePage.add(lblPassword, gbc_lblPassword);

		//Private path label
		JLabel lblPrivatePath = new JLabel("Private Key Path");
		GridBagConstraints gbc_lblPrivatePath = new GridBagConstraints();
		gbc_lblPrivatePath.anchor = GridBagConstraints.WEST;
		gbc_lblPrivatePath.insets = new Insets(0, 0, 5, 5);
		gbc_lblPrivatePath.gridx = 3;
		gbc_lblPrivatePath.gridy = 1;
		homePage.add(lblPrivatePath, gbc_lblPrivatePath);
		
		//Username text field
		usernameField = new JTextField();
		GridBagConstraints gbc_usernameField = new GridBagConstraints();
		gbc_usernameField.fill = GridBagConstraints.HORIZONTAL;
		gbc_usernameField.insets = new Insets(0, 0, 5, 5);
		gbc_usernameField.gridx = 1;
		gbc_usernameField.gridy = 2;
		homePage.add(usernameField, gbc_usernameField);
		usernameField.setColumns(10);
		usernameField.setText("test");
		
		//Public path text field
		publicPathField = new JTextField();
		GridBagConstraints gbc_publicPathField = new GridBagConstraints();
		gbc_publicPathField.fill = GridBagConstraints.HORIZONTAL;
		gbc_publicPathField.insets = new Insets(0, 0, 5, 5);
		gbc_publicPathField.gridx = 2;
		gbc_publicPathField.gridy = 2;
		homePage.add(publicPathField, gbc_publicPathField);
		publicPathField.setText("adminpublic.key");

		//Private path text field
		privatePathField = new JTextField();
		GridBagConstraints gbc_privateFilePath = new GridBagConstraints();
		gbc_privateFilePath.fill = GridBagConstraints.HORIZONTAL;
		gbc_privateFilePath.insets = new Insets(0, 0, 5, 5);
		gbc_privateFilePath.gridx = 3;
		gbc_privateFilePath.gridy = 2;
		homePage.add(privatePathField, gbc_privateFilePath);
		privatePathField.setText("adminprivate.key");

		//New User button
		final JButton btnNewUser = new JButton("New User");
		GridBagConstraints gbc_btnNewUser = new GridBagConstraints();
		gbc_btnNewUser.anchor = GridBagConstraints.NORTH;
		gbc_btnNewUser.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnNewUser.insets = new Insets(0, 0, 5, 0);
		gbc_btnNewUser.gridx = 3;
		gbc_btnNewUser.gridy = 3;

		btnNewUser.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {

				attemptNewUser();
			}

		}

		);

		homePage.add(btnNewUser, gbc_btnNewUser);

		final JButton btnDeleteUser = new JButton("Delete User");
		GridBagConstraints gbc_btnDeleteUser = new GridBagConstraints();
		gbc_btnDeleteUser.anchor = GridBagConstraints.NORTH;
		gbc_btnDeleteUser.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnDeleteUser.insets = new Insets(0, 0, 5, 5);
		gbc_btnDeleteUser.gridx = 4;
		gbc_btnDeleteUser.gridy = 3;

		btnDeleteUser.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {

				attemptDeleteUser();
			}

		}

		);

		homePage.add(btnDeleteUser, gbc_btnDeleteUser);

		btnEnableTwoFactor = new JButton("Setup Two Factor");
		GridBagConstraints gbc_btnEnableTwoFactor = new GridBagConstraints();
		gbc_btnEnableTwoFactor.anchor = GridBagConstraints.NORTH;
		gbc_btnEnableTwoFactor.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnEnableTwoFactor.insets = new Insets(0, 0, 5, 5);
		gbc_btnEnableTwoFactor.gridx = 4;
		gbc_btnEnableTwoFactor.gridy = 6;

		btnEnableTwoFactor.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent arg0) {

				attemptEnableTwoFactor();
			}

		}

		);

		homePage.add(btnEnableTwoFactor, gbc_btnEnableTwoFactor);
		
		//IP Address Label
		JLabel lblIpAddress = new JLabel("Group Address");
		GridBagConstraints gbc_lblIpAddress = new GridBagConstraints();
		gbc_lblIpAddress.anchor = GridBagConstraints.WEST;
		gbc_lblIpAddress.insets = new Insets(0, 0, 5, 5);
		gbc_lblIpAddress.gridx = 1;
		gbc_lblIpAddress.gridy = 4;
		homePage.add(lblIpAddress, gbc_lblIpAddress);

		//File Address Label
		JLabel lblFileAddress = new JLabel("File Address");
		GridBagConstraints gbc_lblFileAddress = new GridBagConstraints();
		gbc_lblFileAddress.anchor = GridBagConstraints.WEST;
		gbc_lblFileAddress.insets = new Insets(0, 0, 5, 5);
		gbc_lblFileAddress.gridx = 1;
		gbc_lblFileAddress.gridy = 6;
		homePage.add(lblFileAddress, gbc_lblFileAddress);
		
		//Port label
		JLabel lblPort = new JLabel("Group Port");
		GridBagConstraints gbc_lblPort = new GridBagConstraints();
		gbc_lblPort.anchor = GridBagConstraints.WEST;
		gbc_lblPort.insets = new Insets(0, 0, 5, 5);
		gbc_lblPort.gridx = 2;
		gbc_lblPort.gridy = 4;
		homePage.add(lblPort, gbc_lblPort);

		//File Port label
		JLabel lblFilePort = new JLabel("File Port");
		GridBagConstraints gbc_lblFilePort = new GridBagConstraints();
		gbc_lblFilePort.anchor = GridBagConstraints.WEST;
		gbc_lblFilePort.insets = new Insets(0, 0, 5, 5);
		gbc_lblFilePort.gridx = 2;
		gbc_lblFilePort.gridy = 6;
		homePage.add(lblFilePort, gbc_lblFilePort);
		
		//IP address text field
		ipField = new JTextField();
		GridBagConstraints gbc_ipField = new GridBagConstraints();
		gbc_ipField.fill = GridBagConstraints.HORIZONTAL;
		gbc_ipField.insets = new Insets(0, 0, 5, 5);
		gbc_ipField.gridx = 1;
		gbc_ipField.gridy = 5;
		ipField.setText("localhost");
		homePage.add(ipField, gbc_ipField);
		ipField.setColumns(10);
		
		//Port text field
		portField = new JTextField();
		GridBagConstraints gbc_portField = new GridBagConstraints();
		gbc_portField.fill = GridBagConstraints.HORIZONTAL;
		gbc_portField.insets = new Insets(0, 0, 5, 5);
		gbc_portField.gridx = 2;
		gbc_portField.gridy = 5;
		portField.setText("8080");
		homePage.add(portField, gbc_portField);
		portField.setColumns(10);

		//File IP address text field
		fileIpField = new JTextField();
		GridBagConstraints gbc_fileIpField = new GridBagConstraints();
		gbc_fileIpField.fill = GridBagConstraints.HORIZONTAL;
		gbc_fileIpField.insets = new Insets(0, 0, 5, 5);
		gbc_fileIpField.gridx = 1;
		gbc_fileIpField.gridy = 7;
		fileIpField.setText("localhost");
		homePage.add(fileIpField, gbc_fileIpField);
		fileIpField.setColumns(10);
		
		//File Port text field
		filePortField = new JTextField();
		GridBagConstraints gbc_filePortField = new GridBagConstraints();
		gbc_filePortField.fill = GridBagConstraints.HORIZONTAL;
		gbc_filePortField.insets = new Insets(0, 0, 5, 5);
		gbc_filePortField.gridx = 2;
		gbc_filePortField.gridy = 7;
		filePortField.setText("8081");
		homePage.add(filePortField, gbc_filePortField);
		filePortField.setColumns(10);
		
		// Fileserver button
		final JButton btnFileServer = new JButton("Connect To FS");
		GridBagConstraints gbc_btnFileServer = new GridBagConstraints();
		gbc_btnFileServer.anchor = GridBagConstraints.NORTH;
		gbc_btnFileServer.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnFileServer.insets = new Insets(0, 0, 5, 0);
		gbc_btnFileServer.gridx = 3;
		gbc_btnFileServer.gridy = 7;

		//attempt to connect to server
		btnFileServer.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptFileConnection(
						fileIpField, 
						filePortField, 
						publicPathField,
						privatePathField,
						tabbedPane);

				}
			}


		);

		homePage.add(btnFileServer, gbc_btnFileServer);

		//Login/lougout buttons
		final JButton btnRSASetup = new JButton("Update RSA");
		final JButton btnRSA = new JButton("RSA Login");
		final JButton btnLogout = new JButton("Logout");
		final JButton btnEnhance = new JButton("ENHANCE");

		GridBagConstraints gbc_btnLogout = new GridBagConstraints();
		gbc_btnLogout.anchor = GridBagConstraints.NORTH;
		gbc_btnLogout.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnLogout.insets = new Insets(0, 0, 5, 0);
		gbc_btnLogout.gridx = 3;
		gbc_btnLogout.gridy = 6;
		
		// //attempt to connect to server
		// btnLogout.addActionListener(new ActionListener() {

		// 		@Override
		// 		public void actionPerformed(ActionEvent arg0) {

		// 			attemptLogout(
		// 				btnNewUser, 
		// 				tabbedPane, 
		// 				btnDeleteUser, 
		// 				btnFileServer,
		// 				btnRSA,
		// 				btnRSASetup,
		// 				btnLogout,
		// 				usersListPanel,
		// 				groupsListPanel,
		// 				fileListsPane,
		// 				filesPane);
		// 		}
		// 	}
		// );

		homePage.add(btnLogout, gbc_btnLogout);
		
		// ENHANCE
		GridBagConstraints gbc_btnEnhance = new GridBagConstraints();
		gbc_btnEnhance.anchor = GridBagConstraints.NORTH;
		gbc_btnEnhance.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnEnhance.insets = new Insets(0, 0, 5, 0);
		gbc_btnEnhance.gridx = 4;
		gbc_btnEnhance.gridy = 7;
		btnEnhance.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptEnhance(
						btnNewUser, 
						tabbedPane, 
						btnDeleteUser, 
						btnFileServer,
						btnRSA,
						btnRSASetup,
						btnLogout,
						btnEnhance);
				}
			}
		);

		homePage.add(btnEnhance, gbc_btnEnhance);
		
		GridBagConstraints gbc_btnRSA = new GridBagConstraints();
		gbc_btnRSA.anchor = GridBagConstraints.NORTH;
		gbc_btnRSA.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnRSA.insets = new Insets(0, 0, 5, 0);
		gbc_btnRSA.gridx = 3;
		gbc_btnRSA.gridy = 5;

		btnRSA.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				attemptRSALogin(
					usernameField, 
					ipField, 
					portField, 
					publicPathField,
					privatePathField,
					btnNewUser, 
					tabbedPane, 
					btnDeleteUser, 
					btnFileServer, 
					btnLogout,
					btnRSA,
					btnRSASetup);
			}
		});
		homePage.add(btnRSA, gbc_btnRSA);

		//RSA SETUP 
		GridBagConstraints gbc_btnRSASetup = new GridBagConstraints();
		gbc_btnRSASetup.anchor = GridBagConstraints.NORTH;
		gbc_btnRSASetup.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnRSASetup.insets = new Insets(0, 0, 5, 0);
		gbc_btnRSASetup.gridx = 4;
		gbc_btnRSASetup.gridy = 5;

		btnRSASetup.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				attemptRSASetup(usernameField, publicPathField);
			}
		});
		homePage.add(btnRSASetup, gbc_btnRSASetup);
		/*//explanation label
		JLabel lblthisPageDoes = new JLabel("(This page does not have full functionality yet)");
		GridBagConstraints gbc_lblthisPageDoes = new GridBagConstraints();
		gbc_lblthisPageDoes.anchor = GridBagConstraints.NORTHWEST;
		gbc_lblthisPageDoes.insets = new Insets(0, 0, 5, 0);
		gbc_lblthisPageDoes.gridwidth = 3;
		gbc_lblthisPageDoes.gridx = 1;
		gbc_lblthisPageDoes.gridy = 7;
		homePage.add(lblthisPageDoes, gbc_lblthisPageDoes);
		*/
		//designer label
		JLabel lblNewLabel = new JLabel("CS1653 Project - Brian Lester, Ryan Conley, Carmen Condeluci");
		GridBagConstraints gbc_lblNewLabel = new GridBagConstraints();
		gbc_lblNewLabel.anchor = GridBagConstraints.NORTHWEST;
		gbc_lblNewLabel.gridwidth = 4;
		gbc_lblNewLabel.gridx = 1;
		gbc_lblNewLabel.gridy = 8;
		homePage.add(lblNewLabel, gbc_lblNewLabel);
		
		//------------------------------------------------------------------------------------------------
		
		//Build groups page
		JSplitPane groupsPage = new JSplitPane();
		tabbedPane.addTab("Group Servers", null, groupsPage, null);
		
		//left pane with group and user lists
		JSplitPane listsPane = new JSplitPane();
		groupsPage.setRightComponent(listsPane);
		
		//user list panel
		final JPanel usersListPanel = new JPanel();
		listsPane.setRightComponent(usersListPanel);
		GridBagLayout gbl_usersListPanel = new GridBagLayout();
		gbl_usersListPanel.columnWidths = new int[]{162, 0};
		gbl_usersListPanel.rowHeights = new int[]{14, 196, 0};
		gbl_usersListPanel.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_usersListPanel.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		usersListPanel.setLayout(gbl_usersListPanel);
		
		//Users label
		JLabel lblUsers = new JLabel("Users");
		GridBagConstraints gbc_lblUsers = new GridBagConstraints();
		gbc_lblUsers.insets = new Insets(0, 0, 5, 0);
		gbc_lblUsers.gridx = 0;
		gbc_lblUsers.gridy = 0;
		usersListPanel.add(lblUsers, gbc_lblUsers);
		
		//groups panel
		final JPanel groupsListPanel = new JPanel();
		listsPane.setLeftComponent(groupsListPanel);
		GridBagLayout gbl_groupsListPanel = new GridBagLayout();
		gbl_groupsListPanel.columnWidths = new int[]{100, 0};
		gbl_groupsListPanel.rowHeights = new int[]{14, 196, 0};
		gbl_groupsListPanel.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_groupsListPanel.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		groupsListPanel.setLayout(gbl_groupsListPanel);
		
		//groups label
		JLabel lblGroups = new JLabel("Groups");
		GridBagConstraints gbc_lblGroups = new GridBagConstraints();
		gbc_lblGroups.insets = new Insets(0, 0, 5, 0);
		gbc_lblGroups.gridx = 0;
		gbc_lblGroups.gridy = 0;
		groupsListPanel.add(lblGroups, gbc_lblGroups);
		
		
		//group functionality panel
		JPanel groupFunctionsPanel = new JPanel();
		groupsPage.setLeftComponent(groupFunctionsPanel);
		GridBagLayout gbl_groupFunctionsPanel = new GridBagLayout();
		gbl_groupFunctionsPanel.columnWidths = new int[]{109, 0};
		gbl_groupFunctionsPanel.rowHeights = new int[]{23, 23, 23, 23, 62, 23, 23, 0};
		gbl_groupFunctionsPanel.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_groupFunctionsPanel.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		groupFunctionsPanel.setLayout(gbl_groupFunctionsPanel);
		
		//Create Group Button
		JButton btnCreateGroup = new JButton("Create Group");
		GridBagConstraints gbc_btnCreateGroup = new GridBagConstraints();
		gbc_btnCreateGroup.anchor = GridBagConstraints.NORTH;
		gbc_btnCreateGroup.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnCreateGroup.insets = new Insets(0, 0, 5, 0);
		gbc_btnCreateGroup.gridx = 0;
		gbc_btnCreateGroup.gridy = 0;
		btnCreateGroup.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptCreateGroup(groupsListPanel);
				}
			}
		);
		groupFunctionsPanel.add(btnCreateGroup, gbc_btnCreateGroup);
		
		//Delete Group Button
		JButton btnDeleteGroup = new JButton("Delete Group");
		GridBagConstraints gbc_btnDeleteGroup = new GridBagConstraints();
		gbc_btnDeleteGroup.anchor = GridBagConstraints.NORTH;
		gbc_btnDeleteGroup.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnDeleteGroup.insets = new Insets(0, 0, 5, 0);
		gbc_btnDeleteGroup.gridx = 0;
		gbc_btnDeleteGroup.gridy = 1;
		btnDeleteGroup.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptDeleteGroup(groupsListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnDeleteGroup, gbc_btnDeleteGroup);
		
		//Add User to Group button
		JButton btnAddUser = new JButton("Add User");
		GridBagConstraints gbc_btnAddUser = new GridBagConstraints();
		gbc_btnAddUser.anchor = GridBagConstraints.NORTH;
		gbc_btnAddUser.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnAddUser.insets = new Insets(0, 0, 5, 0);
		gbc_btnAddUser.gridx = 0;
		gbc_btnAddUser.gridy = 2;
		btnAddUser.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptAddToGroup(usersListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnAddUser, gbc_btnAddUser);
		
		//Remove User from Group button
		JButton btnRemoveUser = new JButton("Remove User");
		GridBagConstraints gbc_btnRemoveUser = new GridBagConstraints();
		gbc_btnRemoveUser.anchor = GridBagConstraints.NORTH;
		gbc_btnRemoveUser.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnRemoveUser.insets = new Insets(0, 0, 5, 0);
		gbc_btnRemoveUser.gridx = 0;
		gbc_btnRemoveUser.gridy = 3;
		btnRemoveUser.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptRemoveFromGroup(usersListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnRemoveUser, gbc_btnRemoveUser);
		
		//View Groups button
		JButton btnViewGroups = new JButton("View My Groups");
		GridBagConstraints gbc_btnViewGroups = new GridBagConstraints();
		gbc_btnViewGroups.anchor = GridBagConstraints.NORTH;
		gbc_btnViewGroups.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewGroups.insets = new Insets(0, 0, 5, 0);
		gbc_btnViewGroups.gridx = 0;
		gbc_btnViewGroups.gridy = 5;
		//attempt to connect to server
		btnViewGroups.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					populateGroupList(groupsListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnViewGroups, gbc_btnViewGroups);
		
		//View users button
		JButton btnViewUsers = new JButton("View My Users");
		GridBagConstraints gbc_btnViewUsers = new GridBagConstraints();
		gbc_btnViewUsers.anchor = GridBagConstraints.NORTH;
		gbc_btnViewUsers.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewUsers.gridx = 0;
		gbc_btnViewUsers.gridy = 6;
		btnViewUsers.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					populateUserList(usersListPanel);
				}
			}


		);
		groupFunctionsPanel.add(btnViewUsers, gbc_btnViewUsers);		
		
		//-------------------------------------------------------------------------------------
		
		//Build file server page
		JSplitPane fileServersPage = new JSplitPane();
		tabbedPane.addTab("File Servers", null, fileServersPage, null);
		
		//File and group lists pane
		JSplitPane fileListsPane = new JSplitPane();
		fileServersPage.setRightComponent(fileListsPane);
		
		//Left pane for group lists
		final JPanel groupsPane = new JPanel();
		fileListsPane.setLeftComponent(groupsPane);
		GridBagLayout gbl_groupsPane = new GridBagLayout();
		gbl_groupsPane.columnWidths = new int[]{100, 0};
		gbl_groupsPane.rowHeights = new int[]{14, 191, 0};
		gbl_groupsPane.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_groupsPane.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		groupsPane.setLayout(gbl_groupsPane);
		
		//Group label
		JLabel lblGroups_1 = new JLabel("Groups");
		GridBagConstraints gbc_lblGroups_1 = new GridBagConstraints();
		gbc_lblGroups_1.anchor = GridBagConstraints.NORTH;
		gbc_lblGroups_1.insets = new Insets(0, 0, 5, 0);
		gbc_lblGroups_1.gridx = 0;
		gbc_lblGroups_1.gridy = 0;
		groupsPane.add(lblGroups_1, gbc_lblGroups_1);
		
		//Right pane for file list
		final JPanel filesPane = new JPanel();
		fileListsPane.setRightComponent(filesPane);
		GridBagLayout gbl_filesPane = new GridBagLayout();
		gbl_filesPane.columnWidths = new int[]{162, 0};
		gbl_filesPane.rowHeights = new int[]{14, 191, 0};
		gbl_filesPane.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_filesPane.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		filesPane.setLayout(gbl_filesPane);
		
		//File label
		JLabel lblFiles = new JLabel();
		GridBagConstraints gbc_lblFiles = new GridBagConstraints();
		gbc_lblFiles.anchor = GridBagConstraints.NORTH;
		gbc_lblFiles.insets = new Insets(0, 0, 5, 0);
		gbc_lblFiles.gridx = 0;
		gbc_lblFiles.gridy = 0;
		filesPane.add(lblFiles, gbc_lblFiles);
		
		//file operations pane
		JPanel fileOperationsPane = new JPanel();
		fileServersPage.setLeftComponent(fileOperationsPane);
		GridBagLayout gbl_fileOperationsPane = new GridBagLayout();
		gbl_fileOperationsPane.columnWidths = new int[]{109, 0};
		gbl_fileOperationsPane.rowHeights = new int[]{23, 23, 23, 62, 23, 23, 23, 0};
		gbl_fileOperationsPane.columnWeights = new double[]{0.0, Double.MIN_VALUE};
		gbl_fileOperationsPane.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		fileOperationsPane.setLayout(gbl_fileOperationsPane);
		
		//upload button
		JButton btnUploadFile = new JButton("Upload File");
		GridBagConstraints gbc_btnUploadFile = new GridBagConstraints();
		gbc_btnUploadFile.anchor = GridBagConstraints.NORTH;
		gbc_btnUploadFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnUploadFile.insets = new Insets(0, 0, 5, 0);
		gbc_btnUploadFile.gridx = 0;
		gbc_btnUploadFile.gridy = 0;
		btnUploadFile.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptFileUpload(filesPane);
				}
			}


		);
		fileOperationsPane.add(btnUploadFile, gbc_btnUploadFile);
		
		//download button
		JButton btnDownloadFile = new JButton("Download File");
		GridBagConstraints gbc_btnDownloadFile = new GridBagConstraints();
		gbc_btnDownloadFile.anchor = GridBagConstraints.NORTH;
		gbc_btnDownloadFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnDownloadFile.insets = new Insets(0, 0, 5, 0);
		gbc_btnDownloadFile.gridx = 0;
		gbc_btnDownloadFile.gridy = 1;
		btnDownloadFile.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptFileDownload(filesPane);
				}
			}


		);
		fileOperationsPane.add(btnDownloadFile, gbc_btnDownloadFile);
		
		//delete button
		JButton btnDeleteFile = new JButton("Delete File");
		GridBagConstraints gbc_btnDeleteFile = new GridBagConstraints();
		gbc_btnDeleteFile.anchor = GridBagConstraints.NORTH;
		gbc_btnDeleteFile.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnDeleteFile.insets = new Insets(0, 0, 5, 0);
		gbc_btnDeleteFile.gridx = 0;
		gbc_btnDeleteFile.gridy = 2;
		btnDeleteFile.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptFileDelete(filesPane);
				}
			}


		);
		fileOperationsPane.add(btnDeleteFile, gbc_btnDeleteFile);
		
		//view groups button
		JButton btnViewGroups_1 = new JButton("View My Groups");
		GridBagConstraints gbc_btnViewGroups_1 = new GridBagConstraints();
		gbc_btnViewGroups_1.anchor = GridBagConstraints.NORTH;
		gbc_btnViewGroups_1.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewGroups_1.insets = new Insets(0, 0, 5, 0);
		gbc_btnViewGroups_1.gridx = 0;
		gbc_btnViewGroups_1.gridy = 4;
		btnViewGroups_1.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					fileListGroups(groupsPane);
				}
			}


		);
		fileOperationsPane.add(btnViewGroups_1, gbc_btnViewGroups_1);
		
		//view my files button
		JButton btnViewMyFiles = new JButton("View Group Files");
		GridBagConstraints gbc_btnViewMyFiles = new GridBagConstraints();
		gbc_btnViewMyFiles.anchor = GridBagConstraints.NORTH;
		gbc_btnViewMyFiles.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewMyFiles.insets = new Insets(0, 0, 5, 0);
		gbc_btnViewMyFiles.gridx = 0;
		gbc_btnViewMyFiles.gridy = 5;
		btnViewMyFiles.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					fileListPopulate(filesPane);
				}
			}


		);
		fileOperationsPane.add(btnViewMyFiles, gbc_btnViewMyFiles);
		
		//view all files button
		JButton btnViewAllFiles = new JButton("View All Files");
		GridBagConstraints gbc_btnViewAllFiles = new GridBagConstraints();
		gbc_btnViewAllFiles.anchor = GridBagConstraints.NORTH;
		gbc_btnViewAllFiles.fill = GridBagConstraints.HORIZONTAL;
		gbc_btnViewAllFiles.gridx = 0;
		gbc_btnViewAllFiles.gridy = 6;
		btnViewAllFiles.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					viewAllFiles(filesPane);
				}
			}


		);
		fileOperationsPane.add(btnViewAllFiles, gbc_btnViewAllFiles);


		//attempt to connect to server
		btnLogout.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent arg0) {

					attemptLogout(
						btnNewUser, 
						tabbedPane, 
						btnDeleteUser, 
						btnFileServer,
						btnRSA,
						btnRSASetup,
						btnLogout,
						usersListPanel,
						groupsListPanel,
						filesPane);
				}
			}
		);

		//-------------------------------------------------------------------------

		//Set Enabled/Disabled functionality on startup
		tabbedPane.setEnabledAt(1, false);
		tabbedPane.setEnabledAt(2, false);
		btnNewUser.setEnabled(false);
		btnDeleteUser.setEnabled(false);
		btnFileServer.setEnabled(false);
		btnLogout.setEnabled(false);
		btnRSASetup.setEnabled(false);
		btnEnableTwoFactor.setEnabled(false);
	}

	public void attemptRSALogin(
					JTextField usernameField, 
					JTextField ipField, 
					JTextField portField,
					JTextField publicPathField,
					JTextField privatePathField,
					JButton btnNewUser, 
					JTabbedPane tabbedPane, 
					JButton btnDeleteUser, 
					JButton btnFileServer, 
					JButton btnLogout,
					JButton btnRSA,
					JButton btnRSASetup) {

		String username = usernameField.getText();
		String publicPath = publicPathField.getText();
		String privatePath = privatePathField.getText();
		String ipAddr = ipField.getText();
		int port = Integer.parseInt(portField.getText());

		if(username.equals("") || publicPath.equals("") || privatePath.equals("") || ipAddr.equals("") || portField.getText().equals("")){
			JOptionPane.showMessageDialog(null, "Null or empty input error.", "Input Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		//Attempt to connect to group server
		//If fail, alert of failure
		if (!RunClient.groupC.connect(ipAddr, port)) {
			JOptionPane.showMessageDialog(null, "Connection failure. Could not connect to GROUP server at " + ipAddr + ":" + port + ".", "Connection Failure", JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		else {
			// Establish secure connection with Diffie-Hellman Protocol
			try {
				
				int result = RunClient.groupC.authenticateGroupServerRSA(
												ipAddr,
												port,
												username, 
												publicPath, 
												privatePath);
				if (result == -1) {
					// Error getting the group server key
					JOptionPane.showMessageDialog(
									null, 
									"Unable to find the server public key.", 
									"Key Failure", 
									JOptionPane.OK_CANCEL_OPTION);
					return;
				} 
				if (result == -2) {
					// Error getting session key
					JOptionPane.showMessageDialog(
									null, 
									"Could not establish a secure connection.", 
									"Session Key Failure", 
									JOptionPane.OK_CANCEL_OPTION);
					return;
				}
				// Get and solve the Puzzle first
				if (result == -3) {
					// Error getting the group server key
					JOptionPane.showMessageDialog(
									null, 
									"Unable to solve the Computational puzzle.", 
									"DoS protection", 
									JOptionPane.OK_CANCEL_OPTION);
					return;
				}
			}
			catch (TwoFactorException e) {
				JPanel codeDialogue = new JPanel();
				JTextField codeField = new JTextField(6);
				JLabel codeDialogueLabel = new JLabel("Please enter the code: ");

				codeDialogue.add(codeDialogueLabel);
				codeDialogue.add(codeField);

				int dialogue = JOptionPane.showOptionDialog(
										null, 
										codeDialogue, 
										"Two Factor Authentication", 
										JOptionPane.OK_CANCEL_OPTION, 
										JOptionPane.PLAIN_MESSAGE, 
										null, 
										null, 
										null);

				if (dialogue == JOptionPane.CANCEL_OPTION){
					return;
				}

				String code = codeField.getText();
				if (!RunClient.groupC.twoFactor(username, code)) {
					JOptionPane.showMessageDialog(
									null, 
									"Wrong Code.", 
									"Session Key Failure", 
									JOptionPane.OK_CANCEL_OPTION);
					return;
				}
			} 
			catch (Exception e1) {
				e1.printStackTrace();
				return;
			}
		}

		//Enable navigation to application resources.
		usernameField.setEnabled(false);
		ipField.setEnabled(false);
		portField.setEnabled(false);
		publicPathField.setEnabled(false);
		privatePathField.setEnabled(false);
		btnNewUser.setEnabled(true);
		btnDeleteUser.setEnabled(true);
		tabbedPane.setEnabledAt(1,true);
		btnFileServer.setEnabled(true);
		btnLogout.setEnabled(true);
		btnRSA.setEnabled(false);
		btnRSASetup.setEnabled(true);
		btnEnableTwoFactor.setEnabled(true);
		currentUsername = username;
	}

	public void attemptRSASetup(
					JTextField usernameField,
					JTextField publicPathField) {
		try {

			//Construct a dialogue box to capture user input and do so.
			JPanel newUserDialogue = new JPanel();
			JTextField newPathField = new JTextField(20);
			JLabel newPathDialogueLabel = new JLabel("Please enter new RSA Public Key Path: ");

			newUserDialogue.add(newPathDialogueLabel);
			newUserDialogue.add(newPathField);

			int dialogue = JOptionPane.showOptionDialog(
											null, 
											newUserDialogue, 
											"Update RSA Public Key", 
											JOptionPane.OK_CANCEL_OPTION, 
											JOptionPane.PLAIN_MESSAGE, 
											null, 
											null, 
											null);

			if (dialogue == JOptionPane.CANCEL_OPTION){
				return;
			}

			String publicPath = newPathField.getText();
			int result = RunClient.groupC.setUpRSA(publicPath);
			if (result == 0) {
				JOptionPane.showMessageDialog(
						null, 
						"RSA Key sucessfully updated.", 
						"Success", 
						JOptionPane.OK_CANCEL_OPTION);
			}
			else if (result == -1) {
				JOptionPane.showMessageDialog(
						null, 
						"Failed to load Key from the specified file.", 
						"Failed", 
						JOptionPane.OK_CANCEL_OPTION);
			}
			else if (result == -2) {
				JOptionPane.showMessageDialog(
						null, 
						"Failed update the RSA key.", 
						"Failed", 
						JOptionPane.OK_CANCEL_OPTION);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return;
		}
	}

	public void attemptFileConnection(
					JTextField fileipField, 
					JTextField filePortField, 
					JTextField publicPathField,
					JTextField privatePathField,
					JTabbedPane tabbedPane) {
		String ipAddr = fileIpField.getText();
		int port = Integer.parseInt(filePortField.getText());
		String publicPath = publicPathField.getText();
		String privatePath = privatePathField.getText();

		if(publicPath.equals("") || privatePath.equals("") || ipAddr.equals("") || filePortField.getText().equals("")){
			JOptionPane.showMessageDialog(null, "Null or empty input error.", "Input Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		if(RunClient.fileC.isConnected()) {
			RunClient.fileC.disconnect();
		}
		//Attempt to connect to file server
		if(!RunClient.fileC.connect(ipAddr, port)){
			JOptionPane.showMessageDialog(null, "Connection failure. Could not connect to FILE server at " + ipAddr + ":" + port + ".", "Connection Failure", JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		Envelope answer = RunClient.fileC.solvePuzzle();
		if (answer == null) {
			// Error getting the group server key
			JOptionPane.showMessageDialog(
							null, 
							"Unable to solve the Computational puzzle.", 
							"DoS protection", 
							JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		if(!RunClient.fileC.connect(ipAddr, port)){
			JOptionPane.showMessageDialog(null, "Connection failure. Could not connect to FILE server at " + ipAddr + ":" + port + ".", "Connection Failure", JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		// Establish secret key with Diffie-Hellman Protocol
		/*if(RunClient.fileC.establishSessionKey() == null) {
			JOptionPane.showMessageDialog(null, "Connection failure. Could not establish a secure connection to FILE server at " + ipAddr + ":" + port + ".", "Connection Failure", JOptionPane.OK_CANCEL_OPTION);
			return;
		}*/

		int result = RunClient.fileC.authenticateFileServerRSA(
												publicPath, 
												privatePath, 
												answer);
		if (result == -1) {
			String cached = RSA.generateFingerprints(RunClient.fileC.cachedPublicKey);
			String server = RSA.generateFingerprints(RunClient.fileC.serverPublicKey);

			//Construct a dialogue box to capture user input and do so.
			JPanel alertServerDialog = new JPanel();
			JLabel serverDialogLabel = new JLabel("Public Key Not Found!");
			JLabel serverHostnamePort = new JLabel("Hostname:Port - " + RunClient.fileC.sock.getInetAddress().getHostName() + ":" + Integer.toString(RunClient.fileC.sock.getPort()));
			JTextField serverExpectedKey = new JTextField("Expected Key: " + cached);
			JTextField serverCurrentKey = new JTextField("Received Key: " + server);
			JLabel serverWarning = new JLabel("Please verify the integrity of this server with your system administrator before connecting.");

			alertServerDialog.setLayout(new BoxLayout(alertServerDialog, BoxLayout.Y_AXIS));
			alertServerDialog.setPreferredSize(new Dimension(800,150));
			serverExpectedKey.setEditable(false);
			serverCurrentKey.setEditable(false);
			serverExpectedKey.setCaretPosition(0);
			serverCurrentKey.setCaretPosition(0);

			alertServerDialog.add(serverDialogLabel);
			alertServerDialog.add(serverHostnamePort);
			alertServerDialog.add(serverExpectedKey);
			alertServerDialog.add(serverCurrentKey);
			alertServerDialog.add(serverWarning);


			int dialogue = JOptionPane.showOptionDialog(null, alertServerDialog, "Public Key Not Found", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);

			if(dialogue == 0){

				RunClient.fileC.addServerToRegistry(new ServerInfo(RunClient.fileC.sock), RunClient.fileC.serverPublicKey);
				if(RunClient.fileC.signedDiffieHellman(
												publicPath, 
												privatePath, 
												answer) == null){
					JOptionPane.showMessageDialog(null, "Server failed.", "Challenge Failure", JOptionPane.OK_CANCEL_OPTION);
					RunClient.fileC.disconnect();
					return;
				}
			}
			else {
				JOptionPane.showMessageDialog(null, "Connection aborted. Please alert your system administrator of suspicious file servers.", "Connection Aborted", JOptionPane.OK_CANCEL_OPTION);
				RunClient.fileC.disconnect();
				return;
			}

		}
		
		tabbedPane.setEnabledAt(2,true);

		//redraw files page
		JSplitPane tempfiles = (JSplitPane)tabbedPane.getComponentAt(2);
		JSplitPane tempfilesRight = (JSplitPane)tempfiles.getRightComponent();
		JPanel templeft = (JPanel)tempfilesRight.getLeftComponent();
		JPanel tempright = (JPanel)tempfilesRight.getRightComponent();
		templeft.removeAll();
		templeft.updateUI();
		tempright.removeAll();
		tempright.updateUI();
	}

	public void attemptLogout(
					JButton btnNewUser, 
					JTabbedPane tabbedPane, 
					JButton btnDeleteUser, 
					JButton btnFileServer,
					JButton btnRSA,
					JButton btnRSASetup,
					JButton btnLogout,
					JPanel usersListPanel,
					JPanel groupsListPanel,
					JPanel filesPane 		) {
		if (RunClient.fileC.isConnected()) {
			RunClient.fileC.disconnect();
		}
		if (RunClient.groupC.isConnected()) {
			RunClient.groupC.disconnect();
		}

		usersListPanel.removeAll();
		usersListPanel.updateUI();
		groupsListPanel.removeAll();
		groupsListPanel.updateUI();
		filesPane.removeAll();
		filesPane.updateUI();

		usernameField.setEnabled(true);
		ipField.setEnabled(true);
		portField.setEnabled(true);
		publicPathField.setEnabled(true);
		privatePathField.setEnabled(true);

		tabbedPane.setEnabledAt(1, false);
		tabbedPane.setEnabledAt(2, false);
		btnNewUser.setEnabled(false);
		btnDeleteUser.setEnabled(false);
		btnFileServer.setEnabled(false);
		btnRSA.setEnabled(true);
		btnRSASetup.setEnabled(false);
		btnLogout.setEnabled(false);
		btnEnableTwoFactor.setEnabled(false);
	}
	
	// ATTEMPTS TO ENHANCE
	public void attemptEnhance(JButton btnNewUser, 
			JTabbedPane tabbedPane, 
			JButton btnDeleteUser, 
			JButton btnFileServer, 
			JButton btnRSA, 
			JButton btnRSASetup, 
			JButton btnLogout, 
			JButton btnEnhance) {
		// does not work on linux
		/*Clip clip = null;
		try {
			AudioInputStream audioIn = AudioSystem.getAudioInputStream(new File("enhance/sunlight.wav"));
			clip = AudioSystem.getClip();
			clip.open(audioIn);
			clip.start();
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		
		MP3 mp3 = new MP3("enhance/sunlight.mp3");
        mp3.play();
		
		ImageIcon icon = new ImageIcon("enhance/ENHANCE-IMAGE.gif");
		int close = JOptionPane.showConfirmDialog(null,
				"PLEASE ENJOY \nTHE EXPERIENCE", 
				"ENHANCE", 
				JOptionPane.OK_OPTION, 
				JOptionPane.INFORMATION_MESSAGE, 
				icon);
		if(close == JOptionPane.OK_OPTION) {
			
		} else {
			mp3.close();
		}
	}

	//Attempts to enable two factor authentication
	public void attemptEnableTwoFactor(){

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

		String result = RunClient.groupC.enable2FactorAuthentication(currToken);

		if (result != null) { 

			JOptionPane.showMessageDialog(
					null, 
					"Enter the following key into Google Authneticator: " + result, 
					"Success", 
					JOptionPane.OK_CANCEL_OPTION);
		}
		else {
			JOptionPane.showMessageDialog(
					null, 
					"Failed to enable two factor authentication for this user.", 
					"Failed", 
					JOptionPane.OK_CANCEL_OPTION);
		}
	}

	//Attempts to create a new user on the group server.
	//Eventually will need required new password creation, but
	//this is not required for phase 2.
	//
	//Should only work if a user is admin. Only functions after
	//a user is logged in.
	public void attemptNewUser(){

		//Construct a dialogue box to capture user input and do so.
		JPanel newUserDialogue = new JPanel();
		JTextField newUsernameField = new JTextField(20);
		JLabel usernameDialogueLabel = new JLabel("Please enter a username: ");
		JTextField newPathField = new JTextField(20);
		JLabel newPathDialogueLabel = new JLabel("Please enter RSA Public Key Path: ");

		newUserDialogue.add(usernameDialogueLabel);
		newUserDialogue.add(newUsernameField);
		newUserDialogue.add(newPathDialogueLabel);
		newUserDialogue.add(newPathField);

		int dialogue = JOptionPane.showOptionDialog(
										null, 
										newUserDialogue, 
										"New User Creation", 
										JOptionPane.OK_CANCEL_OPTION, 
										JOptionPane.PLAIN_MESSAGE, 
										null, 
										null, 
										null);
		
		String newUsername = newUsernameField.getText();
		String newPubKeyPath = newPathField.getText();

		if (dialogue == JOptionPane.CANCEL_OPTION){
			return;
		}

		if(newUsername.equals("") || newPubKeyPath.equals("")){
			JOptionPane.showMessageDialog(null, "Null or empty input error.", "Input Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());
		
		if (newUsername.contains(Token.sentinal)) {
			JOptionPane.showMessageDialog(
							null, 
							"The user could not be created. "
							+ "Username cannot contain a '#'", 
							"User Creation Failure", 
							JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		if (dialogue == 0 && newUsername.length() > 0) {
			// Create new user with currently logged in user token. 
			// If fail, report and return
			int result = RunClient.groupC.createUser(
											newUsername, 
											newPubKeyPath, 
											currToken);
			if (result == -1) {
				JOptionPane.showMessageDialog(
								null, 
								"Could not Load User Key.", 
								"User Creation Failure", 
								JOptionPane.OK_CANCEL_OPTION);
				return;
			}
			if (result == -2) {
				JOptionPane.showMessageDialog(
								null, 
								"The user could not be created.", 
								"User Creation Failure", 
								JOptionPane.OK_CANCEL_OPTION);
				return;
			}
		}
	}

	
	//Attempts to delete a user on the group server.
	//Eventually will need required new password creation, but
	//this is not required for phase 2.
	//
	//Should only work if a user is admin. Only functions after
	//a user is logged in.
	public void attemptDeleteUser(){
	
		//Construct a dialogue box to capture user input and do so.
		JPanel deleteUserDialogue = new JPanel();
		JTextField delUsernameField = new JTextField(20);
		JLabel usernameDialogueLabel = new JLabel("Please enter a username: ");

		deleteUserDialogue.add(usernameDialogueLabel);
		deleteUserDialogue.add(delUsernameField);

		int dialogue = JOptionPane.showOptionDialog(null, deleteUserDialogue, "Delete User", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		if (dialogue == JOptionPane.CANCEL_OPTION){
			return;
		}

		String delUsername = delUsernameField.getText();

		if(delUsername.equals("")){
			JOptionPane.showMessageDialog(null, "Null or empty input error.", "Input Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

		if(dialogue == 0 && delUsername.length() > 0 && !(currentUsername.equals(delUsername))){

			//Create new user with currently logged in user token. If fail, report and return
			if(!RunClient.groupC.deleteUser(delUsername, currToken)){
				JOptionPane.showMessageDialog(null, "The user could not be deleted.", "User Deletion Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}
			
		}
	}

	//Populates the visable list with a users groups based
	//on their token 
	public void populateGroupList(JPanel groupsListPanel){

		if(groupFlag == 1){
			groupsListPanel.removeAll();
			groupsListPanel.updateUI();
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		ArrayList<String> temp = (ArrayList<String>)currToken.getGroups();
		ArrayList<String> alias = (ArrayList<String>)currToken.getAliases();
		for (String a : alias) {
			System.out.println(a);
		}
		final JList groupsListView = new JList(alias.toArray());
		groupsListView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_groupsListView = new GridBagConstraints();
		gbc_groupsListView.fill = GridBagConstraints.BOTH;
		gbc_groupsListView.gridx = 0;
		gbc_groupsListView.gridy = 1;
		groupsListPanel.add(groupsListView, gbc_groupsListView);

		JLabel lblGroups = new JLabel("Groups");
		GridBagConstraints gbc_lblGroups = new GridBagConstraints();
		gbc_lblGroups.insets = new Insets(0, 0, 5, 0);
		gbc_lblGroups.gridx = 0;
		gbc_lblGroups.gridy = 0;
		groupsListPanel.add(lblGroups, gbc_lblGroups);

		groupsListPanel.revalidate();
		groupsListPanel.repaint();

		groupFlag = 1;

		loadedGroups = groupsListView;
		loadedGroupNames = temp.toArray(new String[temp.size()]);
	}

	//Populates the visable list with users from a selected
	//group based on their token 
	public void populateUserList(JPanel usersListPanel){

		ArrayList<String> members = null;

		if(userFlag == 1){
			usersListPanel.removeAll();
			usersListPanel.updateUI();
		}

		String currGroup = "";

		if(loadedGroups != null && loadedGroups.getSelectedValue() != null){
			currGroup = loadedGroupNames[loadedGroups.getSelectedIndex()];
		}
		else{
			JOptionPane.showMessageDialog(
							null, 
							"Please select a group.", 
							"User Error", 
							JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

		if(currToken == null){
			JOptionPane.showMessageDialog(
							null, 
							"Fatal token error.", 
							"Token Error", 
							JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		members = (ArrayList<String>)RunClient.groupC.listMembers(currGroup, currToken);
		System.out.println(members + "\n");
		if (members == null) {
			JOptionPane.showMessageDialog(
							null, 
							"You are not allowed to See the list.", 
							"Permission Error", 
							JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		final JList usersListView = new JList(members.toArray());
		usersListView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_usersListView = new GridBagConstraints();
		gbc_usersListView.fill = GridBagConstraints.BOTH;
		gbc_usersListView.gridx = 0;
		gbc_usersListView.gridy = 1;
		usersListPanel.add(usersListView, gbc_usersListView);

		JLabel lblUsers = new JLabel("Users");
		GridBagConstraints gbc_lblUsers = new GridBagConstraints();
		gbc_lblUsers.insets = new Insets(0, 0, 5, 0);
		gbc_lblUsers.gridx = 0;
		gbc_lblUsers.gridy = 0;
		usersListPanel.add(lblUsers, gbc_lblUsers);

		userFlag = 1;

		usersListPanel.revalidate();
		usersListPanel.repaint();

		loadedUsers = usersListView;
	}

	//Creates a new group with a given name and gives
	//the user who created it ownership rights.
	public void attemptCreateGroup(JPanel groupsListPanel){

		
		//Construct a dialogue box to capture user input and do so.
		JPanel newGroupDialogue = new JPanel();
		JTextField newGroupField = new JTextField(20);
		JLabel groupDialogueLabel = new JLabel("Please enter a group name: ");

		newGroupDialogue.add(groupDialogueLabel);
		newGroupDialogue.add(newGroupField);

		int dialogue = JOptionPane.showOptionDialog(null, newGroupDialogue, "New Group Creation", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		if (dialogue == JOptionPane.CANCEL_OPTION){
			return;
		}

		String newGroup = newGroupField.getText();

		if(newGroup.equals("")){
			JOptionPane.showMessageDialog(null, "Null or empty input error.", "Input Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

		if(dialogue == 0 && newGroup.length() > 0){

			//Create new user with currently logged in user token. If fail, report and return
			if(!RunClient.groupC.createGroup(newGroup, currToken)){
				JOptionPane.showMessageDialog(null, "The group could not be created.", "User Creation Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}
			
			populateGroupList(groupsListPanel);
		}
	}

	//Deletes a group that is selected
	public void attemptDeleteGroup(JPanel groupsListPanel){

		String currGroup = "";

		if(loadedGroups != null && loadedGroups.getSelectedValue() != null)
			currGroup = loadedGroupNames[loadedGroups.getSelectedIndex()];
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		int confirm = JOptionPane.showConfirmDialog(null, "Delete group " + currGroup + "?","Really?", JOptionPane.YES_NO_OPTION);

		if (confirm == JOptionPane.YES_OPTION) {

			UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

			if(currToken == null){
				JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
				return;
			}

			if (RunClient.groupC.deleteGroup(currGroup, currToken)) {
				populateGroupList(groupsListPanel);
			} else
				JOptionPane.showMessageDialog(null, "Did not delete " + currGroup + ".");
		}
	}

	//Adds user to selected group
	public void attemptAddToGroup(JPanel usersListPanel){

		String currGroup = "";

		if(loadedGroups != null && loadedGroups.getSelectedValue() != null)
			currGroup = loadedGroupNames[loadedGroups.getSelectedIndex()];
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		
		//Construct a dialogue box to capture user input and do so.
		JPanel chooseUserDialogue = new JPanel();
		JTextField chooseUsernameField = new JTextField(20);
		JLabel usernameDialogueLabel = new JLabel("Please enter a username: ");

		chooseUserDialogue.add(usernameDialogueLabel);
		chooseUserDialogue.add(chooseUsernameField);

		int dialogue = JOptionPane.showOptionDialog(null, chooseUserDialogue, "Choose User", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		if (dialogue == JOptionPane.CANCEL_OPTION){
			return;
		}

		String chooseUsername = chooseUsernameField.getText();

		if(chooseUsername.equals("")){
			JOptionPane.showMessageDialog(null, "Null or empty input error.", "Input Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		if(dialogue == 0 && chooseUsername.length() > 0 && !(currentUsername.equals(chooseUsername))){

			if(!RunClient.groupC.addUserToGroup(chooseUsername, currGroup, currToken)){
				JOptionPane.showMessageDialog(null, "The user could not be added.", "User Addition Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}

			populateUserList(usersListPanel);
			
		}

	}

	//Adds user to selected group
	public void attemptRemoveFromGroup(JPanel usersListPanel){

		String currGroup = "";

		if(loadedGroups != null && loadedGroups.getSelectedValue() != null)
			currGroup = loadedGroupNames[loadedGroups.getSelectedIndex()];
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		String currUser = "";

		if(loadedUsers != null && loadedUsers.getSelectedValue() != null)
			currUser = (String)loadedUsers.getSelectedValue();
		else{
			JOptionPane.showMessageDialog(null, "Please select a user.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		if(currUser.length() > 0 && !(currentUsername.equals(currUser))){

			if(!RunClient.groupC.deleteUserFromGroup(currUser, currGroup, currToken)){
				JOptionPane.showMessageDialog(null, "The user could not be removed.", "User Remove Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}

			populateUserList(usersListPanel);
			
		}
	}

	//list groups in fileserver page
	public void fileListGroups(JPanel groupsPane){

		if(groupFileFlag == 1){
			groupsPane.removeAll();
			groupsPane.updateUI();
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.fileC.getFileServerKey());

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		ArrayList<String> temp = (ArrayList<String>)currToken.getAliases();
		ArrayList<String> uniqueNames = (ArrayList<String>)currToken.getGroups();

		final JList groupsList = new JList(temp.toArray());
		groupsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_groupsList = new GridBagConstraints();
		gbc_groupsList.fill = GridBagConstraints.BOTH;
		gbc_groupsList.gridx = 0;
		gbc_groupsList.gridy = 1;
		groupsPane.add(groupsList, gbc_groupsList);

		//Group label
		JLabel lblGroups_1 = new JLabel("Groups");
		GridBagConstraints gbc_lblGroups_1 = new GridBagConstraints();
		gbc_lblGroups_1.anchor = GridBagConstraints.NORTH;
		gbc_lblGroups_1.insets = new Insets(0, 0, 5, 0);
		gbc_lblGroups_1.gridx = 0;
		gbc_lblGroups_1.gridy = 0;
		groupsPane.add(lblGroups_1, gbc_lblGroups_1);

		groupsPane.revalidate();
		groupsPane.repaint();

		groupFileFlag = 1;

		loadedFileGroups = groupsList;
		loadedFileGroupNames = uniqueNames.toArray(new String[uniqueNames.size()]);
	}

	//list files in fileserver page
	public void fileListPopulate(JPanel filesPane){

		ArrayList<String> fileMembers = null;

		if(fileFlag == 1){
			filesPane.removeAll();
			filesPane.updateUI();
		}

		String currGroup = "";
		String displayGroup = "";

		if(loadedFileGroups != null && loadedFileGroups.getSelectedValue() != null){
			currGroup = loadedFileGroupNames[loadedFileGroups.getSelectedIndex()];
			displayGroup = (String)loadedFileGroups.getSelectedValue();
		}
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.fileC.getFileServerKey());

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		fileMembers = (ArrayList<String>)RunClient.fileC.listFiles(currGroup, currToken);
		System.out.println(fileMembers + "\n");

		
		//Files list
		final JList filesList = new JList(fileMembers.toArray());
		filesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_filesList = new GridBagConstraints();
		gbc_filesList.fill = GridBagConstraints.BOTH;
		gbc_filesList.gridx = 0;
		gbc_filesList.gridy = 1;
		filesPane.add(filesList, gbc_filesList);

		//File label
		JLabel lblFiles = new JLabel("" + displayGroup + " Files");
		GridBagConstraints gbc_lblFiles = new GridBagConstraints();
		gbc_lblFiles.anchor = GridBagConstraints.NORTH;
		gbc_lblFiles.insets = new Insets(0, 0, 5, 0);
		gbc_lblFiles.gridx = 0;
		gbc_lblFiles.gridy = 0;
		filesPane.add(lblFiles, gbc_lblFiles);

		filesPane.revalidate();
		filesPane.repaint();

		fileFlag = 1;

		loadedFileList = filesList;
	}

	//view ALL files
	public void viewAllFiles(JPanel filesPane){

		ArrayList<String> fileMembers = null;

		if(fileFlag == 1){
			filesPane.removeAll();
			filesPane.updateUI();
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.fileC.getFileServerKey());

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		fileMembers = (ArrayList<String>)RunClient.fileC.listFiles(currToken);
		System.out.println(fileMembers + "\n");

		
		//Files list
		final JList filesList = new JList(fileMembers.toArray());
		filesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		GridBagConstraints gbc_filesList = new GridBagConstraints();
		gbc_filesList.fill = GridBagConstraints.BOTH;
		gbc_filesList.gridx = 0;
		gbc_filesList.gridy = 1;
		filesPane.add(filesList, gbc_filesList);

		//File label
		JLabel lblFiles = new JLabel("ALL Files");
		GridBagConstraints gbc_lblFiles = new GridBagConstraints();
		gbc_lblFiles.anchor = GridBagConstraints.NORTH;
		gbc_lblFiles.insets = new Insets(0, 0, 5, 0);
		gbc_lblFiles.gridx = 0;
		gbc_lblFiles.gridy = 0;
		filesPane.add(lblFiles, gbc_lblFiles);

		filesPane.revalidate();
		filesPane.repaint();

		fileFlag = 1;

		loadedFileList = filesList;
	}

	//upload file "to" specific group
	public void attemptFileUpload(JPanel filesPane){

		String currGroup = "";

		if(loadedFileGroups != null && loadedFileGroups.getSelectedValue() != null)
			currGroup = loadedFileGroupNames[loadedFileGroups.getSelectedIndex()];
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		//Construct a dialogue box to capture user input and do so.
		JPanel chooseFileDialogue = new JPanel();
		JTextField chooseFileField = new JTextField(20);
		JLabel fileDialogueLabel = new JLabel("Please enter a complete file path: ");

		chooseFileDialogue.add(fileDialogueLabel);
		chooseFileDialogue.add(chooseFileField);

		int dialogue = JOptionPane.showOptionDialog(null, chooseFileDialogue, "Choose File", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		if (dialogue == JOptionPane.CANCEL_OPTION){
			return;
		}

		String chooseFile = chooseFileField.getText();
		int tempSplit = chooseFile.lastIndexOf("/");
		String destFile = chooseFile.substring(tempSplit + 1);

		if(chooseFile.equals("")){
			JOptionPane.showMessageDialog(null, "Null or empty input error.", "Input Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		File tempTest = new File(chooseFile);

		//"destination" here is group server, so it needs groupserver's key
		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());

		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		ArrayList<GroupMetadata> userGroupsMetadata = RunClient.groupC.getGroupsMetadata(currToken);
		if(userGroupsMetadata == null) {
			JOptionPane.showMessageDialog(null, "Fatal group meta-data error. 1", "Group Meta-data Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		// find the group meta-data for the current group
		GroupMetadata currGroupMetadata = null;
		for(GroupMetadata group : userGroupsMetadata) {
			if(group.getGroupname().equals(currGroup)) {
				currGroupMetadata = group;
			}
		}
		if(currGroupMetadata == null){
			JOptionPane.showMessageDialog(null, "Fatal group meta-data error. 2", "Group Meta-data Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		currToken = RunClient.groupC.getToken(currentUsername, RunClient.fileC.getFileServerKey());

		if(dialogue == 0 && chooseFile.length() > 0 && tempTest.exists()){

			if(!RunClient.fileC.upload(chooseFile, destFile, currGroup, currToken, currGroupMetadata)){
				JOptionPane.showMessageDialog(null, "The file could not be uploaded.", "File Upload Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}

			System.out.println("File Uploaded!");

			viewAllFiles(filesPane);
			
		}

	}

	//delete file
	public void attemptFileDelete(JPanel filesPane){

		String currFile = "";
		String currGroup = "";

		if(loadedFileList != null && loadedFileList.getSelectedValue() != null)
			currFile = (String)loadedFileList.getSelectedValue();
		else{
			JOptionPane.showMessageDialog(null, "Please select a file.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		if(loadedFileGroups != null && loadedFileGroups.getSelectedValue() != null)
			currGroup = loadedFileGroupNames[loadedFileGroups.getSelectedIndex()];
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.fileC.getFileServerKey());
		
		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		if(currFile.length() > 0){

			if(!RunClient.fileC.delete(currFile, currGroup, currToken)){
				JOptionPane.showMessageDialog(null, "The file could not be removed.", "File Delete Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}

			viewAllFiles(filesPane);
			
		}
	}

	//download file
	public void attemptFileDownload(JPanel filesPane){

		String currFile = "";
		String currGroup = "";

		if(loadedFileList != null && loadedFileList.getSelectedValue() != null)
			currFile = (String)loadedFileList.getSelectedValue();
		else{
			JOptionPane.showMessageDialog(null, "Please select a file.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		if(loadedFileGroups != null && loadedFileGroups.getSelectedValue() != null)
			currGroup = loadedFileGroupNames[loadedFileGroups.getSelectedIndex()];
		else{
			JOptionPane.showMessageDialog(null, "Please select a group.", "Select Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		//Construct a dialogue box to capture user input and do so.
		JPanel chooseFileDialogue = new JPanel();
		JTextField chooseFileField = new JTextField(20);
		JLabel fileDialogueLabel = new JLabel("Please enter a complete file path: ");

		chooseFileDialogue.add(fileDialogueLabel);
		chooseFileDialogue.add(chooseFileField);

		int dialogue = JOptionPane.showOptionDialog(null, chooseFileDialogue, "Save File", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
		
		if (dialogue == JOptionPane.CANCEL_OPTION){
			return;
		}
		
		String destFile = chooseFileField.getText();

		if(destFile.equals("")){
			JOptionPane.showMessageDialog(null, "Null or empty input error.", "Input Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		UserToken currToken = RunClient.groupC.getToken(currentUsername, RunClient.groupC.getGroupServerKey());
		
		ArrayList<GroupMetadata> groupsMetadata = RunClient.groupC.getGroupsMetadata(currToken);
		GroupMetadata currGroupMetadata = null;
		for(GroupMetadata groupMetadata : groupsMetadata) {
			if(groupMetadata.getGroupname().equals(currGroup)) {
				currGroupMetadata = groupMetadata;
			}
		}

		if(currGroupMetadata == null) {
			JOptionPane.showMessageDialog(null, "Fatal meta-data error.", "Meta-data Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}
		
		if(currToken == null){
			JOptionPane.showMessageDialog(null, "Fatal token error.", "Token Error", JOptionPane.OK_CANCEL_OPTION);
			return;
		}

		currToken = RunClient.groupC.getToken(currentUsername, RunClient.fileC.getFileServerKey());

		if(currFile.length() > 0){

			if(!RunClient.fileC.download(currFile, destFile, currGroup, currToken, currGroupMetadata)){
				JOptionPane.showMessageDialog(null, "The File could not be downloaded.", "File Download Failure", JOptionPane.OK_CANCEL_OPTION);
				return;
			}

			viewAllFiles(filesPane);
			
		}
	}
}
